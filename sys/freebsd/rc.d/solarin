#!/bin/sh
#
# SysV init script for the SolarIn daemon for Eclipse Virgo.
# Designed to be run as an /etc/init.d service by the root user.
#
# chkconfig: 3456 99 01
# description: Control the SolarIn server
#
# Set JAVA_HOME to the path to your JDK or JRE.
#
# Set SOLARNET_HOME to the directory that contains the following:
#
# + <SOLARNET_HOME>/
# |
# +--+ virgo/                   <-- Virgo install dir
# |
# +--+ run/                     <-- runtime status dir
#
#
# Set PID_FILE to the path to the same path as specified in
# config.ini for the solarnetwork.pidfile setting.
#
# Set RUNAS to the name of the user to run the process as. The script
# will use "su" to run the node as this user, in the background.
#
# Modify the APP_ARGS and JVM_ARGS variables as necessary.

export JAVA_HOME=/usr/local
SOLARNET_HOME=/var/projects/sn/solarin
VIRGO_HOME=${SOLARNET_HOME}/virgo
PID_FILE=/var/cache/solarnet/in/solarnet.pid
NETRC_FILE=/root/netrc/solarjobs-admin
JOBAPI_BASE=https://data.solarnetwork.net/solarjobs
CURL=/usr/local/bin/curl
PRETTYJSON="/usr/local/bin/python -m json.tool"
export JAVA_OPTS="-Xmx384m -Dsolarnetwork.pidfile=${PID_FILE} -Dfelix.fileinstall.dir=${VIRGO_HOME}/configuration/services -Dfelix.fileinstall.filter=.*\.cfg -Dfelix.fileinstall.noInitialDelay=true"
export JMX_PORT=9676

RUNAS=solarnet

START_CMD="${VIRGO_HOME}/bin/startup.sh"
STOP_CMD="${VIRGO_HOME}/bin/shutdown.sh"
START_SLEEP=20

if [ -e /usr/jails/postgres96/solar93/share/solar-jobs.sh ]; then
	. /usr/jails/postgres96/solar93/share/solar-jobs.sh
fi

# function to check status
do_status () {
	pid=
	run=
	if [ -e $PID_FILE ]; then
		pid=`cat $PID_FILE`
		run=`ps -o pid= -p $pid`
	fi
	if [ -n "$run" ]; then
		echo "SolarIn is running (PID $pid)"
	else
		echo "SolarIn does not appear to be running."
	fi
}

# Parse command line parameters.
case $1 in
	start)
		echo -n "Starting SolarIn server... "
		if [ -z "$RUNAS" ]; then
			${START_CMD} 1>${SOLARNET_HOME}/log/stdout.log 2>&1 &
		else
			su -m $RUNAS -c "nohup ${START_CMD} </dev/null 1>/dev/null 2>&1 &"
		fi
		echo -n "sleeping for ${START_SLEEP} seconds to check PID... "
		sleep ${START_SLEEP}
		do_status
		;;

	status)
		do_status
		;;

	jobs-status)
		do_job_status
		;;

	pause-jobs)
		pause_scheduler
		do_job_status
		;;

	pause-jobs-wait)
		pause_scheduler
		do_job_status
		wait_all_jobs_complete
		;;

	resume-jobs)
		resume_scheduler
		do_job_status
		;;

	configured-jobs)
		json=`configured_jobs`
		if [ -n "$json" ]; then
			echo  "$json" |$PRETTYJSON
		else
			echo 'No jobs configured.'
		fi
		;;

	running-jobs)
		json=`executing_jobs`
		if [ -n "$json" ]; then
			echo  "$json" |$PRETTYJSON
		else
			echo 'No jobs running.'
		fi
		;;

	stop)
		pid=
		run=
		if [ -e $PID_FILE ]; then
			pid=`cat $PID_FILE`
			run=`ps -o pid= -p $pid`
		fi
		if [ -n "$run" ]; then
			pause_scheduler
			wait_all_jobs_complete
			echo "Stopping Solar Net $pid"
			if [ -z "$RUNAS" ]; then
				${STOP_CMD} 1>/dev/null 2>&1 &
			else
				su -m $RUNAS -c "kill $pid"
			fi
		else
			echo SolarIn does not appear to be running.
		fi
		;;

	restart)
		stop
		start
		;;

	*)
		# Print help
		echo "Usage: $0 {start|stop|restart|status|jobs-status|pause-jobs|resume-jobs|configured-jobs|running-jobs|pause-jobs-wait}" 1>&2
		exit 1
		;;
esac

exit 0

